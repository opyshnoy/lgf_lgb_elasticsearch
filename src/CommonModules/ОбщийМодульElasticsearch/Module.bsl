#Область НастройкиДанные

Функция НастройкиElasticsearch() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиElasticsearchСрезПоследних.СерверElasticsearch.Адрес КАК Адрес,
		|	НастройкиElasticsearchСрезПоследних.СерверElasticsearch.Порт КАК Порт,
		|	НастройкиElasticsearchСрезПоследних.СерверElasticsearch КАК Сервер,
		|	НастройкиElasticsearchСрезПоследних.Периодичность КАК Периодичность,
		|	НастройкиElasticsearchСрезПоследних.Префикс КАК Префикс,
		|	НастройкиElasticsearchСрезПоследних.ДатаНачала КАК ДатаНачала,
		|	НастройкиElasticsearchСрезПоследних.РазмерПачки КАК РазмерПачки,
		|	НастройкиElasticsearchСрезПоследних.ПодробныйЛог КАК ПодробныйЛог
		|ИЗ
		|	РегистрСведений.НастройкиElasticsearch.СрезПоследних КАК НастройкиElasticsearchСрезПоследних
		|ГДЕ
		|	НастройкиElasticsearchСрезПоследних.Используется";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки = Новый Структура("Сервер, Адрес, Порт, Периодичность, Префикс, ДатаНачала, РазмерПачки, ПодробныйЛог");
	
	ВыборкаДетальныеЗаписи.Следующий();

	ЗаполнитьЗначенияСвойств(Настройки, ВыборкаДетальныеЗаписи);
	
	Возврат Настройки;	
	
КонецФункции

#КонецОбласти

#Область Логирование

Процедура ЗаписатьЛог(Сервер, ОтправкаУспешна, Описание = "")
	
	Менеджер = РегистрыСведений.ЛогОтправки.СоздатьМенеджерЗаписи();
	Менеджер.Период = ТекущаяДата();
	Менеджер.Сервер = Сервер;
	Менеджер.ОтправкаУспешна = ОтправкаУспешна;
	Менеджер.Описание = Описание;
	Менеджер.Записать();
	
КонецПроцедуры

Процедура ЗаписатьПоcледнююДату(Сервер, Дата)
	
	Менеджер = РегистрыСведений.ОтправленныеДаты.СоздатьМенеджерЗаписи();
	Менеджер.Период = ТекущаяДата();
	Менеджер.Сервер = Сервер;
	Менеджер.ПоследняяДата = Дата;
	Менеджер.Записать();
	
КонецПроцедуры

Функция ПоследняяОтправленнаяДата(Сервер)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтправленныеДатыСрезПоследних.ПоследняяДата
		|ИЗ
		|	РегистрСведений.ОтправленныеДаты.СрезПоследних(, Сервер = &Сервер) КАК ОтправленныеДатыСрезПоследних";
	
	Запрос.УстановитьПараметр("Сервер", Сервер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
	ВыборкаДетальныеЗаписи.Следующий();	
	Возврат ВыборкаДетальныеЗаписи.ПоследняяДата;	
	
КонецФункции

#КонецОбласти

#Область Отправка

Процедура ОтправитьДанные() Экспорт
	
	Настройки = НастройкиElasticsearch();
	
	Если Настройки = Неопределено Тогда
		ЗаписатьЛог(Справочники.СерверыElasticsearch.ПустаяСсылка(), Ложь, "Не заданы настройки в регистре """"НастройкиElasticsearch""");
		Возврат;
	КонецЕсли;
	
	ПодробныйЛог = Настройки.ПодробныйЛог;
	
	ДатаНачала = ПоследняяОтправленнаяДата(Настройки.Сервер);
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = Настройки.ДатаНачала;
	КонецЕсли;
	
	ДатаОкончания = Мин(ДатаНачала + Настройки.Периодичность, ТекущаяДата());
	
	ТаблицаДляОтправки = ДанныеЖурналаРегистрации(ДатаНачала, ДатаОкончания);
	
	Если ТаблицаДляОтправки.Количество() = 0 Тогда
		ЗаписатьЛог(Настройки.Сервер, Ложь, "Нет данных для выгрузки за период: с " + ДатаНачала + " по " + ДатаОкончания);
		ЗаписатьПоcледнююДату(Настройки.Сервер, ДатаОкончания);
		Возврат;
	КонецЕсли;
	
	Соединение = Соединение(Настройки.Сервер, Настройки.Порт);
	
	Успешно = ОтправитьДанныеВElasticsearch(Настройки.Сервер, ТаблицаДляОтправки, Соединение, Настройки.Префикс, Настройки.РазмерПачки); 
	
	Если Успешно Тогда
		ЗаписатьПоcледнююДату(Настройки.Сервер, ДатаОкончания);
		Если ПодробныйЛог Тогда
			ЗаписатьЛог(Настройки.Сервер, Истина, "Отправлены данные за период: " + ДатаНачала + " " + ДатаОкончания);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтправитьДанныеВElasticsearch(Сервер, ТаблицаДляОтправки, Соединение, Префикс, РазмерПачки = 500)
	
	Результат = Ложь;
	
	КоличествоКОтправке = ТаблицаДляОтправки.Количество();
	
	Если РазмерПачки > КоличествоКОтправке ИЛИ РазмерПачки = 0 Тогда
		КоличествоПачек = 1;
	Иначе
		 КоличествоПачек = КоличествоКОтправке / РазмерПачки;
	КонецЕсли;
	
	
	Для НомерПачки = 1 По КоличествоПачек Цикл
		
		ИндексНачала = (НомерПачки - 1) * РазмерПачки;
		
		Если НомерПачки = КоличествоПачек Тогда //последняя часть, отправляем все оставшееся
			РазмерПачки = КоличествоКОтправке - (КоличествоПачек * РазмерПачки) + РазмерПачки;
		КонецЕсли;
		
		Результат = Отправить(Сервер, ТаблицаДляОтправки, ИндексНачала, РазмерПачки, Соединение, Префикс); 
		
		Если Не Результат Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Отправить(Сервер, ТаблицаДляОтправки, ИндексНачала, РазмерПачки, Соединение, Префикс)
	
	ТекстЗапроса = "";
	Для Сч = 1 По РзамерПачки Цикл
		Индекс = ?(Сч = 1, ИндексНачала, Индекс + 1);
		СтрокаЖурнала = ТаблицаДляОтправки[Индекс];
		ИмяИндекса = Префикс + "-" + Формат(СтрокаЖурнала["Дата"], "ДФ=yyyy-MM");
		Действие = "{""index"" : {""_index"" : """ + ИмяИндекса + """, ""_type"" : ""doc""}}";
		СтрокаЗапроса = СформироватьТелоЗапросаПоСтрокеЖурнала(СтрокаЖурнала);
		ДобавлениеЗаписи = Действие + Символы.ПС + СтрокаЗапроса + Символы.ПС;
		ТекстЗапроса = ТелоЗапроса + ДобавлениеЗаписи;
	КонецЦикла;
	
	РезультатОперации = 
		ВыполнитьОтправкуПоHTTP(
		"/_bulk",
		ТелоЗапроса, 
		Соединение
		);		
	
	Если Не РезультатОперации Тогда
		ЗаписатьЛог(Сервер, Ложь, "Не удалось отправить данные в Elasticsearch");
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ВыполнитьОтправкуПоHTTP(АдресРесурса, СтрокаТелоЗапроса, Соединение)
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	Запрос.Заголовки.Вставить("Content-type", "application/json");
	Запрос.УстановитьТелоИзСтроки(СтрокаТелоЗапроса, , ИспользованиеByteOrderMark.НеИспользовать);
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ЗаписьЖурналаРегистрации("Обмен с ElasticSearch. Ошибка выгрузки "+ОписаниеОшибки()+".", , , );
	КонецПопытки;
	Возврат (HTTPОтвет.КодСостояния = 201) ИЛИ (HTTPОтвет.КодСостояния = 200);	
КонецФункции

Функция ПолучитьСтруктуруИзДанныхСтроки(СтрокаЖурнала)
	Колонки = СтрокаЖурнала.Владелец().Колонки;
	ДанныеСтроки = Новый Структура;
	
	Для Каждого Колонка Из Колонки Цикл
		ИмяПоля = Колонка.Имя;
		ЗначениеПоля = СтрокаЖурнала[ИмяПоля];
				
		Если ТипЗнч(ЗначениеПоля) = Тип("Структура") Тогда
			Для Каждого ПолеСтруктуры Из ЗначениеПоля Цикл
				Если ТипЗнч(ПолеСтруктуры.Значение) = Тип("Структура") Тогда
					Для Каждого ПолеСтруктуры Из ПолеСтруктуры.Значение Цикл
						Если ТипЗнч(ПолеСтруктуры.Значение) = Тип("Структура") Тогда
							Для Каждого ПолеСтруктуры Из ПолеСтруктуры.Значение Цикл
								ДанныеСтроки.Вставить(
								ИмяПоля + "_" + ПолеСтруктуры.Ключ, 
								ПолеСтруктуры.Значение
								);
							КонецЦикла;
						ИначеЕсли ТипЗнч(ПолеСтруктуры.Значение) = Тип("Массив") ИЛИ ТипЗнч(ПолеСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
							//ничего не делаем
						Иначе 
							ДанныеСтроки.Вставить(
							ИмяПоля + "_" + ПолеСтруктуры.Ключ, 
							ПолеСтруктуры.Значение
							);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипЗнч(ПолеСтруктуры.Значение) = Тип("Массив") ИЛИ ТипЗнч(ПолеСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
					//ничего не делаем
				Иначе 
					ДанныеСтроки.Вставить(
					ИмяПоля + "_" + ПолеСтруктуры.Ключ, 
					ПолеСтруктуры.Значение
					);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Дата") Тогда
			ДатаUTC = УниверсальноеВремя(ЗначениеПоля);
			ДанныеСтроки.Вставить(ИмяПоля, Формат(ДатаUTC, "ДФ='гггг-ММ-дд""T""ЧЧ:мм:сс'"));
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
			ДанныеСтроки.Вставить(ИмяПоля, Формат(ЗначениеПоля, "ЧГ=0"));
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Массив") ИЛИ ТипЗнч(ЗначениеПоля) = Тип("ТаблицаЗначений") Тогда
			//ничего не делаем
		Иначе
			ДанныеСтроки.Вставить(ИмяПоля, Строка(ЗначениеПоля));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеСтроки;
КонецФункции

Функция СформироватьТелоЗапросаПоСтрокеЖурнала(СтрокаЖурнала)
	ДанныеСтроки = ПолучитьСтруктуруИзДанныхСтроки(СтрокаЖурнала);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	Попытка
		ЗаписатьJSON(ЗаписьJSON, ДанныеСтроки);
	Исключение
	КонецПопытки;
	СериализованноеЗначение = ЗаписьJSON.Закрыть();
	
	Возврат СериализованноеЗначение;
КонецФункции

Функция Соединение(Сервер, Порт)
	Возврат Новый HTTPСоединение(Сервер, Порт, , , , 60);
КонецФункции

Функция ДанныеЖурналаРегистрации(ДатаНачала, ДатаОкончания)
	
	ТЗ = Новый ТаблицаЗначений;
	Отбор = Новый Структура("ДатаНачала, ДатаОкончания");
	Отбор.ДатаНачала 	= ДатаНачала;
	Отбор.ДатаОкончания = ДатаОкончания;
	
	ВыгрузитьЖурналРегистрации(тз, Отбор);
	
	Возврат ТЗ;
	
КонецФункции

#КонецОбласти